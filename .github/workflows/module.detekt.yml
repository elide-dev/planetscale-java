name: "Checks: Detekt"

on:
  ## Manual dispatch
  workflow_dispatch: {}

  ## Sub-workflow call
  workflow_call: {}

  ## Scheduled Checks
  schedule:
     - cron: '29 21 * * 0'

permissions:
  contents: read

env:
  DETEKT_RELEASE_TAG: v1.15.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-detekt:
    name: "Checks: Detekt"
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
      with:
        egress-policy: audit
    - name: "Setup: Checkout"
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 0
    - name: "Setup: JDK ${{ inputs.java_version || vars.JVM_VERSION }}"
      uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
      with:
        java-version: ${{ inputs.java_version || vars.JVM_VERSION }}
        distribution: ${{ inputs.jvm || vars.JVM_VARIANT || 'zulu' }}
    - name: "Setup: Detekt download URL"
      id: detekt_info
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api graphql --field tagName=$DETEKT_RELEASE_TAG --raw-field query='
          query getReleaseAssetDownloadUrl($tagName: String!) {
            repository(name: "detekt", owner: "detekt") {
              release(tagName: $tagName) {
                releaseAssets(name: "detekt", first: 1) {
                  nodes {
                    downloadUrl
                  }
                }
                tagCommit {
                  oid
                }
              }
            }
          }
        ' 1> gh_response.json

        DETEKT_RELEASE_SHA=$(jq --raw-output '.data.repository.release.releaseAssets.tagCommit.oid' gh_response.json)
        if [ $DETEKT_RELEASE_SHA != "37f0a1d006977512f1f216506cd695039607c3e5" ]; then
          echo "Release tag doesn't match expected commit SHA"
        fi

        DETEKT_DOWNLOAD_URL=$(jq --raw-output '.data.repository.release.releaseAssets.nodes[0].downloadUrl' gh_response.json)
        echo "download_url=$DETEKT_DOWNLOAD_URL" >> $GITHUB_OUTPUT
    # Sets up the detekt cli
    - name: "Setup: Detekt"
      run: |
        dest=$( mktemp -d )
        curl --request GET \
          --url ${{ steps.detekt_info.outputs.download_url }} \
          --silent \
          --location \
          --output $dest/detekt
        chmod a+x $dest/detekt
        echo $dest >> $GITHUB_PATH
    # Performs static analysis using Detekt
    - name: "Checks: Detekt"
      continue-on-error: true
      run: |
        detekt --input ${{ github.workspace }} --config ./.github/detekt.yml --report sarif:${{ github.workspace }}/detekt.sarif.json
    # Modifies the SARIF output produced by Detekt so that absolute URIs are relative
    # This is so we can easily map results onto their source files
    # This can be removed once relative URI support lands in Detekt: https://git.io/JLBbA
    - name: "Fixup: Relativize SARIF"
      continue-on-error: true
      run: |
        echo "$(
          jq \
            --arg github_workspace ${{ github.workspace }} \
            '. | ( .runs[].results[].locations[].physicalLocation.artifactLocation.uri |= if test($github_workspace) then .[($github_workspace | length | . + 1):] else . end )' \
            ${{ github.workspace }}/detekt.sarif.json
        )" > ${{ github.workspace }}/detekt.sarif.json
    # Uploads results to GitHub repository using the upload-sarif action
    - name: "Report: Upload SARIF"
      uses: github/codeql-action/upload-sarif@74483a38d39275f33fcff5f35b679b5ca4a26a99 # v2.22.5
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: ${{ github.workspace }}/detekt.sarif.json
        checkout_path: ${{ github.workspace }}
